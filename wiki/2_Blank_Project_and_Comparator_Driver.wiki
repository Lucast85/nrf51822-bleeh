#summary Setup of a blank project and development of comparator's driver using an external button to trigger the comparator during development and experimental phases

= Introduction =

Here are described the setup of a blank project (see [http://www2.keil.com/docs/default-source/default-document-library/mdk5-getting-started.pdf this] useful guide), the hardware to test the comparator (a button and a simple debouncing RC circuit) and the development of the comparator's driver.

----

== The setup of a blank project ==

In uVision 5.10, you can create a new project clicking on _Project->New uVision Project..._. A window will shown. Chose the project folder (create one if no exists) and create the project file (with extension .uvprojx).

https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/select_target.png

Now select the device nRF51822_xxAA and click ok. If the device is not available, probably you've not correctly installed the nRF51 Software Development Kit (SDK). For more information about software packs on MDK 5, see [http://www2.keil.com/docs/default-source/default-document-library/mdk5-getting-started.pdf#page=14 here].
After selecting the device, the Manage Run-Time Environment window shows the related software components for this device.

https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/ManageRunTimeEnvironment.png

To build a blank project select only _CMSIS/CORE_ and _Device/Startup_ .

=== CMSIS ===

The Cortex Microcontroller Software Interface Standard (CMSIS) provides a ground-up software framework for embedded applications that run on Cortex-M based microcontrollers. The CMSIS enables consistent and simple software interfaces to the processor and the peripherals, simplifying software reuse, reducing the learning curve for microcontroller developers (see [http://www2.keil.com/docs/default-source/default-document-library/mdk5-getting-started.pdf#page=17 here]).

*CMSIS-CORE*: Defines the API for the Cortex-M processor core and peripherals and includes a consistent system startup code. The software components CMSIS/CORE and /Device/Startup are all you need to create and run applications on the native processor that uses exceptions, interrupts, and device peripherals.

*Using CMSIS-CORE*

A native Cortex-M application with CMSIS uses the software component CMSIS/CORE, which should be used together with the software component Device/Startup. These components provide the following central files:
 * The startup_nRF51.s file with reset handler and exception vectors.
 * The system_nRF51.c configuration file for basic device setup (clock and memory BUS).
 * The nRF51.h include file for user code access to the microcontroller device.

https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/UsingCMSIS.png

The nRF51.h header file is included in C source files and defines:

 * Peripheral Access with standardized register layout.
 * Access to Interrupts and Exceptions and the Nested Interrupt Vector Controller (NVIC).
 * Intrinsic Functions to generate special instructions, for example to activate sleep mode.
 * Systick Timer (SYSTICK) functions to configure and start a periodic timer interrupt.
 * Debug Access for printf-style I/O and ITM communication via on-chip CoreSight.

*Adding Software Components to the Project*

The files for the components CMSIS/CORE and Device/Startup are added to a project using the µVision dialog Manage Run-Time Environment. Just select the software components.
The µVision environment adds the related files.

=== Project folders arrangement ===
The starting project arrangement is the following:

https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/ProjectFoldersArrangement.png

Now create _Source_ folder and _Include_ folder inside the project's main folder. Populate the _Include_ folder with required header file (.h) and the _Source_ folder with required source code files (library, .c or .cpp). 
To start with a new project are useful the following header files:

 * `compiler_abstraction.h`
 * `nrf.h`
 * `nfr_gpio.h`
 * `nrf51.h`
 * `nrf51:deprecated.h`
 * `pca10001.h`
 * `system_nrf51.h`

Copy the files from the _Include_ folder in the nRF51 SDK installation path (typically in `C:\Keil_v5\ARM\Device\Nordic\nrf51822\Include`) into new project's _Include_ folder.
In uVision Project window, right-click on _Target1_ folder and select _Manage Project Items_

https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/ManageProjectItems.png

In Project Items tab, you can rename the project targets _Target1_ into _bleeh_ and add a new groups named _Lib_. Here will be placed the source library files. 
Finally rename _Source Group 1_ to _Source_. Here will be placed the main source .c or .cpp files besides the header .h files.

=== Setup of Blinky example from blank project ===

To create a working project add a new main.c file into the main project's folder. In uVision, right-click on _bleeh/Source_ folder and select _Add New Item to Group 'Source'_. Select _C file (.c)_ and name it _main.c_. 

https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/AddNewItem.png

The main.c file will be created into selected location (typically the main's project folder) and is linked into Source uVision project's folder.

https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/AddNewItemtoGroupSource.png

Now let's go to write the main source code for a Blinky DIY example: copy the following code into your empty _main.c_ file.

{{{
/*
* This file contains the source code for a sample application using GPIO to drive LEDs.
*/

#include <stdbool.h>
#include <stdint.h>
#include <nRF51.h>
#include "nrf_gpio.h"
#include <pca10001.h>
#include "nrf_delay_l85.h"

/**
 * Main function
 */
int main(void)
{
    // Configure LED-pins as outputs
    nrf_gpio_cfg_output(LED_0);
    nrf_gpio_cfg_output(LED_1);
  
    // LED 0 and LED 1 blink alternately.
    while (true)
    {
        nrf_gpio_pin_clear(LED_0);
        nrf_gpio_pin_set(LED_1);
    
        nrf_delay_ms(1000);
    
        nrf_gpio_pin_clear(LED_1);
        nrf_gpio_pin_set(LED_0);
    
        nrf_delay_ms(200);
    }
}
}}}

=== Build the project ===


=== Download code to flash memory ===

----

== The circuit to test the comparator ==

To emulate the voltage pulse due to the crossing of the magnet above the coil was build a simple circuit. The circuit consists of a button (SW1) to trigger a positive voltage (Vcc=3 V) on a MCU's comparator pin (P0.03) and a one-pole RC circuit (R1 and C1) that remove the button's bounces.
P3 is the on-board 2x5 male pin header of the PCA10001.

https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/debouncingRCcircuit.png

The R-C circuit has a charge-time-constant tc=10 ms and a discharge-time-constant td=20 ms thus the mechanical bounces are bypassed and button presses could be detected.

----

== The comparator's driver ==