#summary Development of comparator's driver using an external button to trigger the comparator during development and experimental phases.
#labels Phase-QA,Phase-Implementation,Phase-Design

<wiki:toc max_depth="2" />

= Introduction =
Here is described the development of LPCOMP driver, the Low Power Comparator peripheral drivers of nRF51822. The LPCOMP compares an input voltage (VIN+), which comes from an analog input pin selected through the PSEL register against a reference voltage (VIN-) selected through the REFSEL and EXTREFSEL registers. In this application is compared (VIN+) with VDD/2 (VDD*4/8).

https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/LPCOMP.png

Every time VIN+ rises above VIN- (the button is pressed->upward crossing), LED 0 of the board will change his state. According to this specifications a simple circuit was build.
  
----

== The circuit to test the comparator ==

To emulate the voltage pulse due to the crossing of the magnet above the coil was build a simple circuit. The circuit consists of a button (SW1) to trigger a positive voltage (Vcc=3 V) on a MCU's comparator pin (P0.03) and a one-pole RC circuit (R1 and C1) that remove the button's bounces.
P3 is the on-board 2x5 male pin header of the PCA10001.

https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/debouncingRCcircuit.png

The R-C circuit has a charge-time-constant tc=10 ms and a discharge-time-constant td=20 ms thus the mechanical bounces are bypassed and button presses could be detected.
Once the button is pressed, a positive 3 V  voltage is at pin P0.03 and the upward crossing will generate an UP event of LPCOMP. This event will change the state of LED 0.
_NOTE: P0.03 correspond to the ADC/LPCOMP input 4 (AIN4)._

----

== The comparator's driver ==

The [https://www.nordicsemi.com/eng/nordic/download_resource/20337/10/53074698 nRF51 Series Reference Manual], in chapter 31, describe the Low Power Comparator characteristics. Thus, I develop the driver following this manual.

Starting from the blank project of task [https://code.google.com/p/nrf51822-bleeh/wiki/2a_Setup_of_a_Blank_Project 2a], let's to create two new files:
 * nrf51_LPCOMP.c
 * nrf51_LPCOMP.h
place the first in the main project's directory and the second in the Include directory.

The hardware abstraction layer CMSIS provide different solutions. One of these is a software structure to easily interact with comparator: 
{{{
/* ================================================================================ */
/* ================                     LPCOMP                     ================ */
/* ================================================================================ */


/**
  * @brief Low power comparator. (LPCOMP)
  */

typedef struct {                                    /*!< LPCOMP Structure                                                      */
  __O  uint32_t  TASKS_START;                       /*!< Start the comparator.                                                 */
  __O  uint32_t  TASKS_STOP;                        /*!< Stop the comparator.                                                  */
  __O  uint32_t  TASKS_SAMPLE;                      /*!< Sample comparator value.                                              */
  __I  uint32_t  RESERVED0[61];
  __IO uint32_t  EVENTS_READY;                      /*!< LPCOMP is ready and output is valid.                                  */
  __IO uint32_t  EVENTS_DOWN;                       /*!< Input voltage crossed the threshold going down.                       */
  __IO uint32_t  EVENTS_UP;                         /*!< Input voltage crossed the threshold going up.                         */
  __IO uint32_t  EVENTS_CROSS;                      /*!< Input voltage crossed the threshold in any direction.                 */
  __I  uint32_t  RESERVED1[60];
  __IO uint32_t  SHORTS;                            /*!< Shortcuts for the LPCOMP.                                             */
  __I  uint32_t  RESERVED2[64];
  __IO uint32_t  INTENSET;                          /*!< Interrupt enable set register.                                        */
  __IO uint32_t  INTENCLR;                          /*!< Interrupt enable clear register.                                      */
  __I  uint32_t  RESERVED3[61];
  __I  uint32_t  RESULT;                            /*!< Result of last compare.                                               */
  __I  uint32_t  RESERVED4[63];
  __IO uint32_t  ENABLE;                            /*!< Enable the LPCOMP.                                                    */
  __IO uint32_t  PSEL;                              /*!< Input pin select.                                                     */
  __IO uint32_t  REFSEL;                            /*!< Reference select.                                                     */
  __IO uint32_t  EXTREFSEL;                         /*!< External reference select.                                            */
  __I  uint32_t  RESERVED5[4];
  __IO uint32_t  ANADETECT;                         /*!< Analog detect configuration.                                          */
  __I  uint32_t  RESERVED6[694];
  __IO uint32_t  POWER;                             /*!< Peripheral power control.                                             */
} NRF_LPCOMP_Type;
}}}