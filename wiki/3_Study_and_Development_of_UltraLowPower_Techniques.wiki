#summary Study and development of ultra-low-power techniques and evaluation of the energy consumption measuring input current.
#labels Phase-QA

https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/work-in-progress_BIG.png

<wiki:toc max_depth="2" />

= Introduction: Ultra Low Power =
Here is described the using of Ultra Low Power tecniques. These tips come from different sources and are joined together. Most useful tips come from:
 * [https://www.nordicsemi.com/eng/nordic/download_resource/20337/10/53074698 nRF51 Series Reference Manual V2.1, Nordic Semiconductor]
 * [http://infocenter.arm.com/help/topic/com.arm.doc.dui0497a/DUI0497A_cortex_m0_r0p0_generic_ug.pdf CorteCortex™-M0 Devices-Generic User Guide (ARM DUI 0497A)]
 * [http://www.embedded.com/design/mcus-processors-and-socs/4230085/The-basics-of-low-power-programming-on-the-Cortex-M0 The basics of low-power programming on the Cortex-M0, Joseph Yiu, ARM Ltd.]
 * [http://processors.wiki.ti.com/index.php/ULP_Advisor ULP Advisor, Texas Instruments]
 * [http://www.embedded.com/design/real-time-and-performance/4210470/1/Efficient-C-Code-for-ARM-Devices Energy efficient C code for ARM devices, Chris Shore, ARM]

Following, are developed timer's drivers. Finally they're used in a new project implementing ULP tecniques.
At the end is designed a low-current measuring circuit and is used to evaluate energy consumption of the system.

The firmware to be designed will sleep the CPU until a pulse is received from AIN4 (LPCOMP peripheral). This guarantee low power consumption during inactivity state but a timer must be on to measure time interval among two pulses. It's mandatory to use a low power timer/clock.
When the second pulse is received, the delta-time is calculated and a speed-related-information could be extrapolated.
During test phases, the current consumption are evaluated and compared among two different solutions: 
 * using of ULP tecniques (e.g. sleep the CPU during inactivity state);
 * not using of ULP tecniques;

== ULP techniques ==

Ultra Low Power techniques involve either hardware and firmware feature. 
The choosing of this IC is related to its low voltage power supply and to SOC warranties such as low component count (due to integrated radio module). However the nRF51 supports three different power supply alternatives: internal DC/DC converter setup, internal LDO setup, and Low Voltage mode setup thus, to preserve energy, DC/DC converter and LDO must be disabled.
In firmware, different solutions will be applied. E.g. hold the nRF51 in sleep mode during inactivity time, maintain Real Time Clock and interrupt from LPCOMP on, etc.
These solutions is described in following paragraphs.


===The power management===
As mentioned above, maximum power saving mode is Low Voltage mode. Unfortunately this mode could be reach only modifying circuit topology, as shown in following schematic:
https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/LowPowerMode.png
Since PCA10001 hasn't any DEC2 pin on external header, it's very difficult to apply this little change in circuit's topology thus I prefer use the internal LDO. This can be obtained disabling internal DC/DC and, eventually, short-circuited SB1 (equal to short-circuited AVDD and VDD), as shown in following images:

https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/InternalLDOOnly.png

https://dl.dropboxusercontent.com/u/43091897/HostedFile/nRF51822_project/SB1_link.png

I've no short-circuited SB1 to preserve board integrity, so a small resistance (and energy wasting) is in series with supply current flowing. I think the resistance is the Rds resistance of a mosfet so it's in the order of tenth of milliohms. 
The supply voltage range is 1.8 V - 3.6 V using internal LDO regulator. I chose to supply the nRF51 with external well regulated 1.8 V to preserve power.

Firmware task to disable DC/DC converter is very simple: 
{{{	
   //Disable internal DC/DC step down
   NRF_POWER->DCDCEN=POWER_DCDCEN_DCDCEN_Disabled;	
}}}

==== System mode and sub-power mode ====
nRF51 series has two system-mode: 
 * System OFF mode: is the deepest power saving mode the system can enter. In this mode, the system’s core functionality is powered down and all ongoing tasks are terminated. The only mechanism that is functional and responsive in this mode is the reset and the wake-up mechanism. One or more blocks of RAM can be retained in System OFF mode depending on the settings in the RAMON register. The system can be woken up from System OFF mode either from the DETECT signal generated by the GPIO peripheral, by the ANADETECT signal generated by the LPCOMP module, or from a reset. When the system wakes up from OFF mode, a system reset is performed.
Unfortunately System OFF mode all timers are shut down although LPCOMP is on; thus this mode is useless.

 * System ON mode: is a fully operational mode, where the CPU and selected peripherals can be brought into a state where they are functional and more or less responsive depending on the sub power mode selected. In System ON mode the CPU can either be active or sleeping. The CPU enters sleep by executing the WFI or WFE instruction found in the CPU’s instruction set. In WFI sleep the CPU will wake up as a result of an interrupt request if the associated interrupt is enabled in the NVIC. In WFE sleep the CPU will wake up as a result of an interrupt request regardless of the associated interrupt being enabled in the NVIC or not.
The system implements mechanisms to automatically switch on and off the appropriate power sources depending on how many peripherals are active, and how much power is needed at any given time. The power requirement of a peripheral is directly related to its activity level. 

*Sub power modes*

During CPU sleep, in System ON mode, the system can reside in one of the following two sub power modes:

 * Constant Latency
 * Low Power

In Constant Latency mode the CPU wakeup latency and the PPI task response will be constant and kept at a minimum. This is secured by forcing a set of base resources while in sleep, see the device specific product specification for more information about which resources are forced on. The advantage of having a constant and predictable latency will be at the cost of having increased power consumption. The Constant Latency mode is selected by triggering the CONSTLAT task.

In Low Power mode the automatic power management system, will be most effective and save most power. The advantage of having low power will be at the cost of having varying CPU wakeup latency and PPI task response. The Low Power mode is selected by triggering the LOWPWR task but, when the system enters ON mode, it will, by default, reside in the Low Power sub power mode.
Definitely the configuration chosen is System ON mode->Low Power.

ISO/IEC C cannot directly generate the WFI, WFE, and SEV ARM Cortex M0 instructions. The CMSIS provides the following intrinsic functions for these instructions:

{{{
void __WFE(void) // Wait for Event
void __WFI(void) // Wait for Interrupt
void __SEV(void) // Send Event
}}}

The interesting one in this context is __WFI() that suspends execution until one of the following events occurs:
 * an exception
 * an interrupt becomes pending, which would preempt if PRIMASK was clear
 * a Debug Entry request, regardless of whether debug is enabled.

_Note_
_WFI is intended for power saving only. When writing software assume that WFI might behave as a NOP operation_

Thus, to enter in sleep mode, simply write:
{{{
__WFI();
}}}

===The choice of clock and timer===
The lowest possible sleep current while maintaining BLE connection timing is using Real Time Counter (RTC). This timer use the Low Frequency Clock (LFCLK) @ 32.768 kHz, using an external crystal oscillator.
Thus, the total current consumption in sleep mode is about I_on + I _RTC + I_X32k + I_LPC, typical 2.3 + 0.2 + 0.4 + 0.5 = 3.4 µA where I_on is the SYSTEM-ON base current with 16 kB RAM enabled, I _RTC is the Timer (LFCLK source) current consumption, I_X32k is the run current for 32.768 kHz crystal oscillator and I_LPC is the run current for LPCOMP.

{{{
//****************describe how to initialize timer, chose clk and LPCOMP****************//
}}}

----
= Timer driver development=
----
= Using of ULP techniques among two pulses, measuring time interval =

== Setup of circuit to measure low current ==
== Measurement and comparison of energy consumption using ULP techniques or not==
----